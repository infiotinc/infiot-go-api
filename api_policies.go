/*
 * Infiot API
 *
 * # Introduction  <b>Infiot</b> provides API endpoints for interacting with <b> Infiot Management Portal</b>, so that you can rapidly deploy IoT at scale anywhere with automation.  <b>Infiot's</b> Developer-friendly SDKs and APIs enable seamless integration.Leverage <b>Infiot SDK</b> and seamlessly integrate with additional services for early time-to-market.  The <b>Infiot API</b> is a powerful [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) that can be accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client tools such as curl/wget, or HTTP libraries of most modern programming languages including Python, GoLang, Java.  The API provides abundance of features, listing some of the top rated ones, * Support to interact securely with our API Servers from a Client Web application (<b>API tokens should never be exposed outside</b>).  * The API responds with a well-formatted [JSON](http://www.json.org/) data.  * Support for built-in HTTP features, like HTTP authentication and HTTP verbs, which can be easily interpreted by any HTTP clients that are designed to comply with [HTTP RFC](https://tools.ietf.org/html/rfc2616).   If you have good knowledge with REST API, our reference guide will help serve you to get started.  To start using <b>Infiot</b> APIs, API tokens need to be created  If you have any questions you can reach out to us on [support@infiot.com](mailto:support@infiot.com)  # Endpoints  Our APIs can be accessed through HTTP requests to our API Servers. There are different API servers provisioned based on production stages. The user has to select the applicable API server from the given list of servers populated, and punch in the appropriate MSP tenant name field to get started:  ``` https://{tenant}.api.infiot.net ```  All our APIs are [versioned] (#versioning). If there are any changes to the API which either changes the response format or request parameter, the version would be incremented accordingly.  # Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the Infiot MSP Portal.The user should have appropriate privileges in the tenant portal for the tokens option to be visible.  Tokens can be generated from `Tokens` navigation window.Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.   All API requests must be made over secure HTTP [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  Once the token is generated and ready to use, authorize the API token in the swagger hub, click on the `Authorize` button and in the pop-up, fill the API token and click on `Authorize` again.   # Request Methods  Our API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) to specify the desired operation to be performed. The documentation below specifies request method supported by each endpoint and the resulting action with its appropriate CRUD workflow.  | Method Type   | CRUD   | Description   | |-  |-  |-  | | GET   | Read   | GET requests can be used to retrieve data (eg: get all tenant details from a Master MSP or MSP)   | | POST   | Create   | POST requests can be used to create a new record (eg: adding new tenants to the Master MSP or MSP)   | | PUT   | Update/Replace   | PUT requests can be used for updating an existing record (eg: updating the name or description of a MSP   | | DELETE   | Delete   | DELETE requests can be used to delete a record (like deleting a MSP from the Master MSP) |   # Response Codes  All API requests will respond with appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Your API client should handle each response class differently. | Response Code    | Description | |-                 |-            | | 2XX              | These are successful responses and indicate that the API request returned the expected response | | 4XX              | These indicate that there was a problem with the request like a missing parameter or invalid values | |5XX               | These indicate server errors when the server is unreachable or is misconfigured. In this case, you should retry the API request after some delay |   # <a name=\"versioning\"></a>Versioning  All our APIs are versioned. Our current API version is `v1` and we are continuously working on improving it further and provide additional endpoints. If there are any changes to an API which either changes the response format or request parameter, we will increment the version.
 *
 * API version: v9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package netskopebwan

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type PoliciesApiService service

/*
PoliciesApiService Create new firewall block rule for a specific source IP
Create a new firewall block rule in a policy of an organizant tenant. childTenantId is a mandatory parameter to be passed if the API is executed using a MSP or Master MSP tenant token. childTenantId should be organization tenant&#x27;s Id when accessed from MasterMSP/MSP tenant. It can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token.&lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy rule is created successfully based on the Request body args provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param id Identifier
 * @param optional nil or *PoliciesApiAddDenySourceIPRuleToPolicyOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiAddDenySourceIPRuleToPolicyOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) AddDenySourceIPRuleToPolicy(ctx context.Context, body AddPolicyFirewallRuleInput, id string, localVarOptionals *PoliciesApiAddDenySourceIPRuleToPolicyOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}/block-src-ip"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Create new policy
Create a new policy in an organizant tenant. childTenantId is a mandatory parameter to be passed if the API is executed using a MSP or Master MSP tenant token. childTenantId should be organization tenant&#x27;s Id when accessed from MasterMSP/MSP tenant. It can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token.&lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Edge is created successfully based on the Request body args provided. There are two ways to create a Policy, &lt;br&gt;&lt;br&gt; - Clone a Policy from an existing edge template (assuming template edge is already provisioned by the MSP or the service provider) &lt;br&gt;&lt;br&gt; - Create a new edge by passing all the necessary details. &lt;br&gt; Notice the difference in the mandatory request body parameters for both the options below &lt;br&gt;    | Creation Type      | Mandatory Request Body Parameters |    |--------------------|-------------|    |  Clone From Template  | &#x60;\&quot;sourceTenantId\&quot;&#x60; &#x60;\&quot;sourceObjectId\&quot;&#x60; &#x60;\&quot;name\&quot;&#x60;|    |  Create a new Policy | &#x60;\&quot;name\&quot;&#x60; |
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param optional nil or *PoliciesApiAddPolicyOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiAddPolicyOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) AddPolicy(ctx context.Context, body AddPolicyInput, localVarOptionals *PoliciesApiAddPolicyOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Create new QoS rule for a specific source IP
Create a new QoS rule in a policy of an organizant tenant. childTenantId is a mandatory parameter to be passed if the API is executed using a MSP or Master MSP tenant token. childTenantId should be organization tenant&#x27;s Id when accessed from MasterMSP/MSP tenant. It can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token.&lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy rule is created successfully based on the Request body args provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param id Identifier
 * @param optional nil or *PoliciesApiAddQoSSourceIPRuleToPolicyOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiAddQoSSourceIPRuleToPolicyOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) AddQoSSourceIPRuleToPolicy(ctx context.Context, body AddPolicyQoSRuleInput, id string, localVarOptionals *PoliciesApiAddQoSSourceIPRuleToPolicyOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}/qos-rule-src-ip"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Delete a policy firewall rule using match source IP
Delete a policy firewall rule by passing the Policy id and source IP as a parameters. childTenantId that belongs to an Orgnaization tenant is required when the API is accessed using Master MSP/MSP tenant token. The new value/s of the edge should be populated on the Request body. childTenantId can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token. &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy rule is successfully deleted
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Identifier
 * @param ip IP
 * @param optional nil or *PoliciesApiDeleteDenySourceIPRuleFromPolicyOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiDeleteDenySourceIPRuleFromPolicyOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) DeleteDenySourceIPRuleFromPolicy(ctx context.Context, id string, ip string, localVarOptionals *PoliciesApiDeleteDenySourceIPRuleFromPolicyOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}/block-src-ip/{ip}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ip"+"}", fmt.Sprintf("%v", ip), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Delete policy using policy Id
Delete a Policy by passing the Policy id as a parameter. childTenantId that belongs to an Orgnaization tenant is required when the API is accessed using Master MSP/MSP tenant token. The new value/s of the edge should be populated on the Request body. childTenantId can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token. &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy is successfully deleted
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Identifier
 * @param optional nil or *PoliciesApiDeletePolicyByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiDeletePolicyByIdOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) DeletePolicyById(ctx context.Context, id string, localVarOptionals *PoliciesApiDeletePolicyByIdOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Delete a policy QoS rule using match source IP
Delete a policy QoS rule by passing the Policy id and source IP as a parameters. childTenantId that belongs to an Orgnaization tenant is required when the API is accessed using Master MSP/MSP tenant token. The new value/s of the edge should be populated on the Request body. childTenantId can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token. &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy rule is successfully deleted
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Identifier
 * @param ip IP
 * @param optional nil or *PoliciesApiDeleteQoSSourceIPRuleFromPolicyOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiDeleteQoSSourceIPRuleFromPolicyOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) DeleteQoSSourceIPRuleFromPolicy(ctx context.Context, id string, ip string, localVarOptionals *PoliciesApiDeleteQoSSourceIPRuleFromPolicyOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}/qos-rule-src-ip/{ip}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ip"+"}", fmt.Sprintf("%v", ip), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService List all policies
List all policies under an organization tenant. childTenantId  is a mandatory parameter to be passed if the API is executed using a MSP or Master MSP tenant token. The Child Tenant Id should be an organization tenant&#x27;s Id when accessed from MasterMSP/MSP tenant. It can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token. &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |List of all policies configured in the Child tenant will be displayed
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *PoliciesApiGetAllPoliciesOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return []Policy
*/

type PoliciesApiGetAllPoliciesOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) GetAllPolicies(ctx context.Context, localVarOptionals *PoliciesApiGetAllPoliciesOpts) ([]Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v []Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Get policy using policy Id
Get all the details of a specific policy by passing the Policy id as a parameter. childTenantId that belongs to an Orgnaization tenant is required when the API is accessed using Master MSP/MSP tenant token.It can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token.&lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Details of Policy successfully fetched &lt;br&gt;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id Identifier
 * @param optional nil or *PoliciesApiGetPolicyByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiGetPolicyByIdOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) GetPolicyById(ctx context.Context, id string, localVarOptionals *PoliciesApiGetPolicyByIdOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
PoliciesApiService Update policy details using policy Id
Updates a Policy by passing the Policy id as a parameter. childTenantId that belongs to an Orgnaization tenant is required when the API is accessed using Master MSP/MSP tenant token. The new value/s of the edge should be populated on the Request body. childTenantId can be empty when using an Organization tenant token. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed when using a MSP/Master MSP token. &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Error Message Code : &#x60;400&#x60;|    | Passed |Policy is successfully updated using the values provided in Request body
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param id Identifier
 * @param optional nil or *PoliciesApiUpdatePolicyByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Policy
*/

type PoliciesApiUpdatePolicyByIdOpts struct {
	ChildTenantId optional.String
}

func (a *PoliciesApiService) UpdatePolicyById(ctx context.Context, body Policy, id string, localVarOptionals *PoliciesApiUpdatePolicyByIdOpts) (Policy, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Policy
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/policies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Policy
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
