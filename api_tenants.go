/*
 * Infiot API
 *
 * # Introduction  <b>Infiot</b> provides API endpoints for interacting with <b> Infiot Management Portal</b>, so that you can rapidly deploy IoT at scale anywhere with automation.  <b>Infiot's</b> Developer-friendly SDKs and APIs enable seamless integration.Leverage <b>Infiot SDK</b> and seamlessly integrate with additional services for early time-to-market.  The <b>Infiot API</b> is a powerful [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) that can be accessed by an [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) client tools such as curl/wget, or HTTP libraries of most modern programming languages including Python, GoLang, Java.  The API provides abundance of features, listing some of the top rated ones, * Support to interact securely with our API Servers from a Client Web application (<b>API tokens should never be exposed outside</b>).  * The API responds with a well-formatted [JSON](http://www.json.org/) data.  * Support for built-in HTTP features, like HTTP authentication and HTTP verbs, which can be easily interpreted by any HTTP clients that are designed to comply with [HTTP RFC](https://tools.ietf.org/html/rfc2616).   If you have good knowledge with REST API, our reference guide will help serve you to get started.  To start using <b>Infiot</b> APIs, API tokens need to be created  If you have any questions you can reach out to us on [support@infiot.com](mailto:support@infiot.com)  # Endpoints  Our APIs can be accessed through HTTP requests to our API Servers. There are different API servers provisioned based on production stages. The user has to select the applicable API server from the given list of servers populated, and punch in the appropriate MSP tenant name field to get started:  ``` https://{tenant}.api.infiot.net ```  All our APIs are [versioned] (#versioning). If there are any changes to the API which either changes the response format or request parameter, the version would be incremented accordingly.  # Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the Infiot MSP Portal.The user should have appropriate privileges in the tenant portal for the tokens option to be visible.  Tokens can be generated from `Tokens` navigation window.Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.   All API requests must be made over secure HTTP [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  Once the token is generated and ready to use, authorize the API token in the swagger hub, click on the `Authorize` button and in the pop-up, fill the API token and click on `Authorize` again.   # Request Methods  Our API endpoints use [HTTP request methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) to specify the desired operation to be performed. The documentation below specifies request method supported by each endpoint and the resulting action with its appropriate CRUD workflow.  | Method Type   | CRUD   | Description   | |-  |-  |-  | | GET   | Read   | GET requests can be used to retrieve data (eg: get all tenant details from a Master MSP or MSP)   | | POST   | Create   | POST requests can be used to create a new record (eg: adding new tenants to the Master MSP or MSP)   | | PUT   | Update/Replace   | PUT requests can be used for updating an existing record (eg: updating the name or description of a MSP   | | DELETE   | Delete   | DELETE requests can be used to delete a record (like deleting a MSP from the Master MSP) |   # Response Codes  All API requests will respond with appropriate [HTTP status code](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes). Your API client should handle each response class differently. | Response Code    | Description | |-                 |-            | | 2XX              | These are successful responses and indicate that the API request returned the expected response | | 4XX              | These indicate that there was a problem with the request like a missing parameter or invalid values | |5XX               | These indicate server errors when the server is unreachable or is misconfigured. In this case, you should retry the API request after some delay |   # <a name=\"versioning\"></a>Versioning  All our APIs are versioned. Our current API version is `v1` and we are continuously working on improving it further and provide additional endpoints. If there are any changes to an API which either changes the response format or request parameter, we will increment the version.
 *
 * API version: v9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package netskopebwan

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type TenantsApiService service

/*
TenantsApiService Create a new tenant
Creates a new tenant with the given details &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Tenant creation would be under the tenant where the API token is created|    | Passed | Tenant creation would be under the tenant whose id is &#x60;childTenantId&#x60;|
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
| Request Body Params      | Description |
 |-----------------|-------------|
 |&lt;b&gt;&lt;i&gt;name&lt;/i&gt;&lt;/b&gt; | Name of the tenant|
 |&lt;b&gt;&lt;i&gt;domainNames&lt;/i&gt;&lt;/b&gt; | List of domain names to access the tenant|
 | &lt;b&gt;&lt;i&gt;description&lt;/i&gt;&lt;/b&gt; | A suitable description for the tenant|
 | &lt;b&gt;&lt;i&gt;isDisabled&lt;/i&gt;&lt;/b&gt; | If set to true the tenant would be disabled else enabled|
 | &lt;b&gt;&lt;i&gt;tenantTypeInput&lt;/i&gt;&lt;/b&gt; | Tenant Type. Refer &#x60;TenantTypeInput&#x60; below for the schema definition | &lt;br&gt;
 * @param optional nil or *TenantsApiAddTenantOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Tenant
*/

type TenantsApiAddTenantOpts struct {
	ChildTenantId optional.String
}

func (a *TenantsApiService) AddTenant(ctx context.Context, body Tenant, localVarOptionals *TenantsApiAddTenantOpts) (Tenant, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Tenant
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tenants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v Tenant
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TenantsApiService Delete tenant using tenant Id
Deletes a specific tenant uniquely identified by the tenant ID &lt;br&gt;&lt;br&gt; &lt;b&gt;&lt;i&gt;Note - Please exercise caution before using this API, the call cannot be undone once its executed.&lt;/i&gt;&lt;/b&gt;&lt;br&gt; &lt;b&gt;Notice&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Tenant with the given id (for deletion) would be searched under the parent tenant (where the API token is created)|    | Passed | Tenant with given id (for deletion) would be searched under the parent tenant     (Tenant whose id is &#x60;childTenantId&#x60;|
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tenantId Tenant Identifier
 * @param optional nil or *TenantsApiDeleteTenantByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Tenant
*/

type TenantsApiDeleteTenantByIdOpts struct {
	ChildTenantId optional.String
}

func (a *TenantsApiService) DeleteTenantById(ctx context.Context, tenantId string, localVarOptionals *TenantsApiDeleteTenantByIdOpts) (Tenant, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Delete")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Tenant
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", fmt.Sprintf("%v", tenantId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Tenant
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TenantsApiService List all tenants
Retrieve details of all the child tenants (Master MSP, MSP, Organization) for the given tenant.&lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Details of tenants under the parent tenant (where the API token is created) would be listed|    | Passed | Details of tenants under the parent tenant     (tenant whose id is &#x60;childTenantId&#x60;) would be listed|
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *TenantsApiGetAllTenantsOpts - Optional Parameters:
     * @param "MaxItems" (optional.Int32) -  Maximum number of items to return
     * @param "AfterCursor" (optional.String) -  Start point
     * @param "BeforeCursor" (optional.String) -  End Point
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return TenantsList
*/

type TenantsApiGetAllTenantsOpts struct {
	MaxItems      optional.Int32
	AfterCursor   optional.String
	BeforeCursor  optional.String
	ChildTenantId optional.String
}

func (a *TenantsApiService) GetAllTenants(ctx context.Context, localVarOptionals *TenantsApiGetAllTenantsOpts) (TenantsList, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue TenantsList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tenants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.MaxItems.IsSet() {
		localVarQueryParams.Add("maxItems", parameterToString(localVarOptionals.MaxItems.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AfterCursor.IsSet() {
		localVarQueryParams.Add("afterCursor", parameterToString(localVarOptionals.AfterCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BeforeCursor.IsSet() {
		localVarQueryParams.Add("beforeCursor", parameterToString(localVarOptionals.BeforeCursor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v TenantsList
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TenantsApiService Get tenant details using tenant Id
Retrieve the details of a given tenant uniquely identified by the tenant ID &lt;br&gt;   &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Tenant with the given id would be searched under the parent tenant (where the API token is created)|    | Passed | Tenant with given id would be searched under the parent tenant (Tenant whose id is &#x60;childTenantId&#x60;|
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tenantId Tenant Identifier
 * @param optional nil or *TenantsApiGetTenantByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Tenant
*/

type TenantsApiGetTenantByIdOpts struct {
	ChildTenantId optional.String
}

func (a *TenantsApiService) GetTenantById(ctx context.Context, tenantId string, localVarOptionals *TenantsApiGetTenantByIdOpts) (Tenant, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Tenant
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", fmt.Sprintf("%v", tenantId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Tenant
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
TenantsApiService Update tenant details using tenant Id
Update the details of a given tenant, uniquely identified by the tenant ID. &lt;br&gt; &lt;b&gt;Note&lt;/b&gt; the difference in behavior when &#x60;childTenantId&#x60; is passed/not passed &lt;br&gt;     | &#x60;childTenantId&#x60;      | Behavior |    |-----------------|-------------|    |  Not passed  | Tenant with the given id (for updating) would be searched under the parent tenant (where the API token is created)|    | Passed | Tenant with given id (for updating) would be searched under the parent tenant (Tenant whose id is &#x60;childTenantId&#x60;|
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body | Request Body Params      | Description |
 |-----------------|-------------|
 |  &lt;b&gt;&lt;i&gt;name&lt;/i&gt;&lt;/b&gt; | Name of the tenant|
 | &lt;b&gt;&lt;i&gt;domainNames&lt;/i&gt;&lt;/b&gt; | List of domain names to access the tenant|
 | &lt;b&gt;&lt;i&gt;description&lt;/i&gt;&lt;/b&gt; | A suitable description for the tenant|
 | &lt;b&gt;&lt;i&gt;isDisabled&lt;/i&gt;&lt;/b&gt; | If set to true the tenant would be disabled else enabled| &lt;br&gt;
 &lt;b&gt;Note&lt;/b&gt;: The tenant type parameter &#x60;tenantTypeInput&#x60; cannot be updated, so please either remove it from the request body or set it to old value while invoking this method.
 * @param tenantId Tenant Identifier
 * @param optional nil or *TenantsApiUpdateTenantByIdOpts - Optional Parameters:
     * @param "ChildTenantId" (optional.String) -  Tenant Id where the resource exists (Use this parameter if you wish to execute you query to a specific tenant). Make sure the Tenant should be a child of the Tenant where the API token is created
@return Tenant
*/

type TenantsApiUpdateTenantByIdOpts struct {
	ChildTenantId optional.String
}

func (a *TenantsApiService) UpdateTenantById(ctx context.Context, body Tenant, tenantId string, localVarOptionals *TenantsApiUpdateTenantByIdOpts) (Tenant, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue Tenant
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tenants/{tenantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tenantId"+"}", fmt.Sprintf("%v", tenantId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ChildTenantId.IsSet() {
		localVarQueryParams.Add("childTenantId", parameterToString(localVarOptionals.ChildTenantId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v Tenant
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 0 {
			var v InfiotErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
